{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.jsx","util/env.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","GifExpertApp.jsx","index.jsx"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","categories","className","type","onChange","target","getGifs","category","a","url","encodeURI","fetch","response","json","data","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","GifExpertApp","ReactDom","render","document","querySelector"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAS,GAAGR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAcO,OACnEN,EAAS,KAIqBO,UAAU,UAAxC,SACI,uBACIC,KAAK,OACLT,MAAOA,EACPU,SAfc,SAACP,GACvBF,EAASE,EAAEQ,OAAOX,a,+BCLbY,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,6BCFA,oCDEA,SAGII,MAAMF,GAHV,cAGbG,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAJY,kBAKZA,EAAKC,KAAI,SAAAC,GACZ,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,SATtB,2CAAH,sDEFPY,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMT,EAAS,EAATA,IAClC,OACI,gCACI,qBAAKa,IAAKb,EAAKc,IAAKL,IACpB,4BAAIA,QCFHM,EAAU,SAAC,GAAgB,IAAfjB,EAAc,EAAdA,SACrB,ECAwB,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNW,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACRtB,EAAQC,GAAUsB,MAAK,SAACC,GACtBH,EAAS,CAAEb,KAAMgB,EAAML,SAAS,SAEjC,CAAClB,IAEGmB,EDZqBK,CAAaxB,GAA/BkB,EAAR,EAAQA,QAASX,EAAjB,EAAiBA,KAEjB,OADAkB,QAAQC,IAAIR,GAER,gCACI,6BAAKlB,IACJkB,GAAW,0CAERX,EAAKC,KAAI,SAAAC,GAAG,OAAI,cAAC,EAAD,eAERA,GADCA,EAAIC,WEUdiB,EAlBM,WACnB,MAAoCzC,mBAAS,CAC3C,kBADF,mBAAOQ,EAAP,KAAmBT,EAAnB,KAGA,OACE,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACGS,EAAWc,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCVxB4B,IAASC,OAAO,cAAC,EAAD,IAAiBC,SAASC,cAAc,Y","file":"static/js/main.87286b4a.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [value, setValue] = useState(\"\");\r\n    \r\n    const handleInputChange = (e) => {\r\n        setValue(e.target.value);\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (value.trim().length > 0) setCategories(categories => [value,...categories]);\r\n        setValue('');\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit} className=\"miclase\">\r\n            <input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                />\r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n    \r\n}","import {API_KEY} from '../util/env'\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${API_KEY}`;\r\n\r\n    const response = await fetch(url);\r\n    const {data} = await response.json();\r\n    return data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n    }});\r\n\r\n}\r\n","export const API_KEY = 'dtRmi7FGvKUvs5hr39XNAnHMCn77osAA';","export const GifGridItem = ({id,title,url}) => {\r\n    return (\r\n        <div>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport {GifGridItem} from './GifGridItem'\r\nexport const GifGrid = ({category}) => {\r\n    const { loading, data } = useFetchGifs(category);\r\n    console.log(loading);\r\n    return (\r\n        <div>\r\n            <h3>{category}</h3>\r\n            {loading && <h2>Loading </h2>}\r\n            {\r\n                data.map(img => <GifGridItem \r\n                    key={img.id}\r\n                    {...img}  />)\r\n            }\r\n                \r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({ data: imgs, loading: false });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\nconst GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\r\n    \"One punch man\"\r\n  ]);\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <hr />\r\n      <AddCategory setCategories={setCategories} />\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category}/>\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import ReactDom from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './index.css'\r\n\r\nReactDom.render(<GifExpertApp/>, document.querySelector('#root'));\r\n\r\n"],"sourceRoot":""}